{"version":3,"sources":["components/buttons.jsx","components/lap.jsx","util/format.js","components/lapList.jsx","components/stopwatch.jsx","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","lapResetButtonText","startStopButtonText","lapResetFunction","startStopFunction","lapResetButtonDisabled","initialStart","isRunning","start","stop","reset","addLap","react_default","a","createElement","className","onClick","disabled","toLowerCase","Lap","_this$props","this","lap","lapNum","concat","Component","padZero","number","toString","displayTimeFormat","milliseconds","displayMilliseconds","Math","floor","displaySeconds","displayMinutes","LapList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","firstLap","laps","firstLapTimeElapsed","parseInt","length","style","height","map","idx","lapList","lap_Lap","key","setDefaultState","startTime","stopTime","timeElapsed","lapStartTime","lapTimeElapsed","Stopwatch","intervalId","bind","assertThisInitialized","addLapToList","setState","Date","now","_this2","offset","firstStart","setInterval","clearInterval","unshift","_this$state","components_buttons","lapList_LapList","App","stopwatch_Stopwatch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aeb92ff1.chunk.js","sourcesContent":["import React from 'react';\n\n// css\nimport '../css/buttons.css';\n\nconst Buttons = (props) => {\n  const { initialStart, isRunning, start, stop, reset, addLap } = props;\n  let lapResetButtonText, startStopButtonText;\n  let lapResetFunction, startStopFunction;\n  let lapResetButtonDisabled;\n\n  if (initialStart) {\n    lapResetButtonText = \"Lap\";\n    lapResetButtonDisabled = true;\n    startStopButtonText = \"Start\";\n    startStopFunction = start;\n  } else if (isRunning) {\n    lapResetButtonText = \"Lap\";\n    lapResetFunction = addLap;\n    lapResetButtonDisabled = false;\n    startStopButtonText = \"Stop\";\n    startStopFunction = stop;\n  } else {\n    lapResetButtonText = \"Reset\";\n    lapResetFunction = reset;\n    startStopButtonText = \"Start\";\n    startStopFunction = start;\n  }\n\n  return (\n    <div className='buttons'>\n      {/* lap and reset btn */}\n      <button\n        className=\"lap\"\n        onClick={lapResetFunction}\n        disabled={lapResetButtonDisabled}>\n        {lapResetButtonText}\n      </button>\n\n      {/* start and stop btn */}\n      <button\n        className={startStopButtonText.toLowerCase()}\n        onClick={startStopFunction}>\n        {startStopButtonText}\n      </button>\n    </div>\n  );\n}\n\nexport default Buttons;","import React, { Component } from 'react';\n\nexport default class Lap extends Component {\n  render() {\n    const { lap, lapNum } = this.props;\n    \n    return(\n      <li className=\"lap-item\">\n        <span>{`Lap ${lapNum}`} </span>\n        <span>{ lap }</span>\n      </li>\n    );\n  }\n}","const padZero = number => {\n  return number < 10 ? \"0\" + number : number.toString();\n}\n\nexport const displayTimeFormat = milliseconds => {\n  let displayMilliseconds = Math.floor((milliseconds / 10) % 100);\n  let displaySeconds = Math.floor((milliseconds / 1000) % 60);\n  let displayMinutes = Math.floor((milliseconds / 1000) / 60);\n  \n  return `${padZero(displayMinutes)}:${padZero(displaySeconds)}.${padZero(displayMilliseconds)}`;\n}\n","import React, { Component } from 'react';\n\n// lap component\nimport Lap from './lap';\n\n// util\nimport { displayTimeFormat } from '../util/format';\n\n// css\n// import '../'\n\nexport default class LapList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  \n  render() {\n    const { laps, firstLapTimeElapsed } = this.props\n    let firstLap;\n    if (parseInt(firstLapTimeElapsed) === 0) {\n      firstLap = null;\n    } else {\n      firstLap = <li className=\"lap-item\">\n        <span>{`Lap ${laps.length + 1}`} </span>\n        <span>{displayTimeFormat(firstLapTimeElapsed)}</span>\n      </li>;\n    }\n    \n    return(\n      <div style={{height: '25vh'}}>\n        <ul className=\"lap-list\">\n          { firstLap }\n          {\n            laps.map( (lap, idx, lapList) => (\n              <Lap key={idx} lap={lap} lapNum={lapList.length - idx} />\n            ))\n          }\n        </ul>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\n// Components\nimport Buttons from './buttons';\nimport LapList from './lapList';\n\n// utils\nimport { displayTimeFormat } from '../util/format';\n\n// css\nimport '../css/stopwatch.css'\n\nconst setDefaultState = () => ({\n  initialStart: true,\n  isRunning: false,\n  startTime: 0,\n  stopTime: 0,\n  timeElapsed: 0,\n  laps: [],\n\n  lapStartTime: 0,\n  lapTimeElapsed: 0\n});\n\nexport default class Stopwatch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = setDefaultState();\n\n    this.intervalId = null;\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.reset = this.reset.bind(this);\n    this.addLapToList = this.addLapToList.bind(this);\n  }\n    \n  firstStart() {\n    this.setState({ \n      startTime: Date.now(),\n      lapStartTime: Date.now(),\n      initialStart: false\n    });\n  }\n\n  // start timer\n  start() {\n    let offset = Date.now() - this.state.stopTime;\n\n    if (this.state.initialStart) {\n      this.firstStart();\n    } else {\n      this.setState({\n        startTime: this.state.startTime + offset,\n        lapStartTime: this.state.lapStartTime + offset\n      });\n    }\n    \n    this.intervalId = setInterval( () => {\n      this.setState({ \n        isRunning: true,\n        timeElapsed: Date.now() - this.state.startTime,\n        lapTimeElapsed: Date.now() - this.state.lapStartTime\n      });\n    }, 1);\n  }\n\n  // stop timer\n  stop() {\n    clearInterval(this.intervalId);\n    this.setState({ isRunning: false, stopTime: Date.now() });\n  }\n\n  // reset timer\n  reset() {\n    this.setState( setDefaultState() );\n  }\n\n  // lap\n  addLapToList() {\n    this.state.laps.unshift(displayTimeFormat(this.state.lapTimeElapsed));\n    this.setState({ lapStartTime: Date.now(), laps: this.state.laps });\n  }\n  \n  render() {\n    const { initialStart, isRunning } = this.state;\n    \n    return (\n      <div className=\"main-stopwatch\">\n        <h1 className=\"main-header\">Stopwatch</h1>\n        <h1 className=\"main-time\">{displayTimeFormat(this.state.timeElapsed)}</h1>\n\n        <Buttons\n          initialStart={ initialStart }\n          isRunning={ isRunning }\n          start={ this.start }\n          stop={ this.stop }\n          reset={ this.reset }\n          addLap={ this.addLapToList }\n          />\n\n        <LapList laps={ this.state.laps } firstLapTimeElapsed={ this.state.lapTimeElapsed }/>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// Components\nimport Stopwatch from './components/stopwatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}